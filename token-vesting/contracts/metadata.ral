Contract Metadata(
  vesting: Vesting, 
  address: Address, 
  lockedAmount: U256,
  mut totalClaimed: U256,
  mut claimIndex: U256,
  mut lastProcessedTimestamp: U256
) {
  const InvalidCaller = 0
  const InsufficientBalance = 1

  pub fn getAddress() -> Address {
    return address
  }

  @using(assetsInContract = true, updateFields = true)
  pub fn unlockToken(amount: U256, claimIndexUpdate: U256, lastClaimTimeStamp: U256) -> () {
    checkCaller!(callerContractId!() == contractId!(vesting), InvalidCaller)
    assert!(lockedAmount - totalClaimed >= amount, InsufficientBalance)
    transferTokenFromSelf!(address, ALPH, amount)
    totalClaimed = totalClaimed + amount
    lastProcessedTimestamp = lastClaimTimeStamp
    claimIndex = claimIndexUpdate
    if(lockedAmount - totalClaimed == 0){
      destroySelf!(address)
    }
  }

  pub fn getLockedAmount() -> U256 {
    return lockedAmount
  }

  pub fn getTotalClaimed() -> U256 {
    return totalClaimed
  }

  pub fn getClaimIndex() -> U256 {
    return claimIndex
  }

  pub fn getLastProcessedTime() -> U256 {
    return lastProcessedTimestamp
  }
}